// Code generated by "stringer -type Directive --linecomment"; DO NOT EDIT.

package linter

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Undefined-0]
	_ = x[AddUserHeader-1]
	_ = x[AllowIP-2]
	_ = x[AllowVars-3]
	_ = x[AnonymousURL-4]
	_ = x[Audit-5]
	_ = x[AuditPurge-6]
	_ = x[AutoLoginIP-7]
	_ = x[AutoLoginIPBanner-8]
	_ = x[BinaryTimeout-9]
	_ = x[Books24x7Site-10]
	_ = x[ByteServe-11]
	_ = x[CASServiceURL-12]
	_ = x[Charset-13]
	_ = x[ClientTimeout-14]
	_ = x[ConnectWindow-15]
	_ = x[Cookie-16]
	_ = x[CookieFilter-17]
	_ = x[DbVar-18]
	_ = x[DenyIfRequestHeader-19]
	_ = x[Description-20]
	_ = x[DNS-21]
	_ = x[Domain-22]
	_ = x[DomainJavaScript-23]
	_ = x[EBLSecret-24]
	_ = x[EbrarySite-25]
	_ = x[EncryptVar-26]
	_ = x[ExcludeIP-27]
	_ = x[ExcludeIPBanner-28]
	_ = x[ExtraLoginCookie-29]
	_ = x[Find-30]
	_ = x[FirstPort-31]
	_ = x[FormSelect-32]
	_ = x[FormSubmit-33]
	_ = x[FormVariable-34]
	_ = x[Gartner-35]
	_ = x[Group-36]
	_ = x[HAName-37]
	_ = x[HAPeer-38]
	_ = x[Host-39]
	_ = x[HostJavaScript-40]
	_ = x[HTTPHeader-41]
	_ = x[HTTPMethod-42]
	_ = x[Identifier-43]
	_ = x[IncludeFile-44]
	_ = x[IncludeIP-45]
	_ = x[Interface-46]
	_ = x[IntruderIPAttempts-47]
	_ = x[IntruderLog-48]
	_ = x[IntruderUserAttempts-49]
	_ = x[IntrusionAPI-50]
	_ = x[LBPeer-51]
	_ = x[Location-52]
	_ = x[LogFile-53]
	_ = x[LogFilter-54]
	_ = x[LogFormat-55]
	_ = x[LoginCookieDomain-56]
	_ = x[LoginCookieName-57]
	_ = x[LoginMenu-58]
	_ = x[LoginPort-59]
	_ = x[LoginPortSSL-60]
	_ = x[LogSPU-61]
	_ = x[MaxConcurrentTransfers-62]
	_ = x[MaxLifetime-63]
	_ = x[MaxSessions-64]
	_ = x[MaxVirtualHosts-65]
	_ = x[MessagesFile-66]
	_ = x[MetaFind-67]
	_ = x[MimeFilter-68]
	_ = x[Name-69]
	_ = x[NeverProxy-70]
	_ = x[OptionAcceptXForwardedFor-71]
	_ = x[OptionAllowWebSubdirectories-72]
	_ = x[OptionAnyDNSHostname-73]
	_ = x[OptionBlockCountryChange-74]
	_ = x[OptionCookie-75]
	_ = x[OptionCookiePassThrough-76]
	_ = x[OptionCSRFToken-77]
	_ = x[OptionDisableSSL40bit-78]
	_ = x[OptionDisableSSL56bit-79]
	_ = x[OptionDisableSSLv2-80]
	_ = x[OptionDomainCookieOnly-81]
	_ = x[OptionEbraryUnencodedTokens-82]
	_ = x[OptionExcludeIPMenu-83]
	_ = x[OptionForceHTTPSAdmin-84]
	_ = x[OptionForceHTTPSLogin-85]
	_ = x[OptionForceWildcardCertificate-86]
	_ = x[OptionHideEZproxy-87]
	_ = x[OptionHttpsHyphens-88]
	_ = x[OptionIChooseToUseDomainLinesThatThreatenTheSecurityOfMyNetwork-89]
	_ = x[OptionIgnoreWildcardCertificate-90]
	_ = x[OptionIPv6-91]
	_ = x[OptionLoginReplaceGroups-92]
	_ = x[OptionLogReferer-93]
	_ = x[OptionLogSAML-94]
	_ = x[OptionLogSession-95]
	_ = x[OptionLogSPUEdit-96]
	_ = x[OptionLogUser-97]
	_ = x[OptionMenuByGroups-98]
	_ = x[OptionMetaEZproxyRewriting-99]
	_ = x[OptionNoCookie-100]
	_ = x[OptionNoHideEZproxy-101]
	_ = x[OptionNoHttpsHyphens-102]
	_ = x[OptionNoMetaEZproxyRewriting-103]
	_ = x[OptionNoProxyFTP-104]
	_ = x[OptionNoUTF16-105]
	_ = x[OptionNoXForwardedFor-106]
	_ = x[OptionProxyByHostname-107]
	_ = x[OptionProxyFTP-108]
	_ = x[OptionRecordPeaks-109]
	_ = x[OptionRedirectUnknown-110]
	_ = x[OptionReferInHostname-111]
	_ = x[OptionRelaxedRADIUS-112]
	_ = x[OptionRequireAuthenticate-113]
	_ = x[OptionSafariCookiePatch-114]
	_ = x[OptionStatusUser-115]
	_ = x[OptionTicketIgnoreExcludeIP-116]
	_ = x[OptionUnsafeRedirectUnknown-117]
	_ = x[OptionUsernameCaretN-118]
	_ = x[OptionUTF16-119]
	_ = x[OptionXForwardedFor-120]
	_ = x[OverDriveSite-121]
	_ = x[PDFRefresh-122]
	_ = x[PDFRefreshPost-123]
	_ = x[PDFRefreshPre-124]
	_ = x[PidFile-125]
	_ = x[Proxy-126]
	_ = x[ProxyHostnameEdit-127]
	_ = x[ProxySSL-128]
	_ = x[RADIUSRetry-129]
	_ = x[RedirectSafe-130]
	_ = x[Referer-131]
	_ = x[RejectIP-132]
	_ = x[RemoteIPHeader-133]
	_ = x[RemoteIPInternalProxy-134]
	_ = x[RemoteIPTrustedProxy-135]
	_ = x[RemoteTimeout-136]
	_ = x[Replace-137]
	_ = x[RunAs-138]
	_ = x[ShibbolethDisable-139]
	_ = x[ShibbolethMetadata-140]
	_ = x[SkipPort-141]
	_ = x[SPUEdit-142]
	_ = x[SPUEditVar-143]
	_ = x[SQLiteTempDir-144]
	_ = x[SSLCipherSuite-145]
	_ = x[SSLHonorCipherOrder-146]
	_ = x[SSLOpenSSLConfCmd-147]
	_ = x[SSOUsername-148]
	_ = x[Title-149]
	_ = x[TokenKey-150]
	_ = x[TokenSignatureKey-151]
	_ = x[UMask-152]
	_ = x[URL-153]
	_ = x[URLAppendEncoded-154]
	_ = x[URLRedirect-155]
	_ = x[URLRedirectAppend-156]
	_ = x[URLRedirectAppendEncoded-157]
	_ = x[UsageLimit-158]
	_ = x[Validate-159]
	_ = x[XDebug-160]
}

const _Directive_name = "UndefinedAddUserHeaderAllowIPAllowVarsAnonymousURLAuditAuditPurgeAutoLoginIPAutoLoginIPBannerBinaryTimeoutBooks24x7SiteByteServeCASServiceURLCharsetClientTimeoutConnectWindowCookieCookieFilterDbVarDenyIfRequestHeaderDescriptionDNSDomainDomainJavaScriptEBLSecretEbrarySiteEncryptVarExcludeIPExcludeIPBannerExtraLoginCookieFindFirstPortFormSelectFormSubmitFormVariableGartnerGroupHANameHAPeerHostHostJavaScriptHTTPHeaderHTTPMethodIdentifierIncludeFileIncludeIPInterfaceIntruderIPAttemptsIntruderLogIntruderUserAttemptsIntrusionAPILBPeerLocationLogFileLogFilterLogFormatLoginCookieDomainLoginCookieNameLoginMenuLoginPortLoginPortSSLLogSPUMaxConcurrentTransfersMaxLifetimeMaxSessionsMaxVirtualHostsMessagesFileMetaFindMimeFilterNameNeverProxyOption AcceptX-Forwarded-ForOption AllowWebSubdirectoriesOption AnyDNSHostnameOption BlockCountryChangeOption CookieOption CookiePassThroughOption CSRFTokenOption DisableSSL40bitOption DisableSSL56bitOption DisableSSLv2Option DomainCookieOnlyOption ebraryUnencodedTokensOption ExcludeIPMenuOption ForceHTTPSAdminOption ForceHTTPSLoginOption ForceWildcardCertificateOption HideEZproxyOption HttpsHyphensOption I choose to use Domain lines that threaten the security of my networkOption IgnoreWildcardCertificateOption IPv6Option LoginReplaceGroupsOption LogRefererOption LogSAMLOption LogSessionOption LogSPUEditOption LogUserOption MenuByGroupsOption MetaEZproxyRewritingOption NoCookieOption NoHideEZproxyOption NoHttpsHyphensOption NoMetaEZproxyRewritingOption NoProxyFTPOption NoUTF16Option NoX-Forwarded-ForOption ProxyByHostnameOption ProxyFTPOption RecordPeaksOption RedirectUnknownOption ReferInHostnameOption RelaxedRADIUSOption RequireAuthenticateOption SafariCookiePatchOption StatusUserOption TicketIgnoreExcludeIPOption UnsafeRedirectUnknownOption UsernameCaretNOption UTF16Option X-Forwarded-ForOverDriveSitePDFRefreshPDFRefreshPostPDFRefreshPrePidFileProxyProxyHostnameEditProxySSLRADIUSRetryRedirectSafeRefererRejectIPRemoteIPHeaderRemoteIPInternalProxyRemoteIPTrustedProxyRemoteTimeoutReplaceRunAsShibbolethDisableShibbolethMetadataSkipPortSPUEditSPUEditVarSQLiteTempDirSSLCipherSuiteSSLHonorCipherOrderSSLOpenSSLConfCmdSSOUsernameTitleTokenKeyTokenSignatureKeyUMaskURLURLAppendEncodedURLRedirectURLRedirectAppendURLRedirectAppendEncodedUsageLimitValidateXDebug"

var _Directive_index = [...]uint16{0, 9, 22, 29, 38, 50, 55, 65, 76, 93, 106, 119, 128, 141, 148, 161, 174, 180, 192, 197, 216, 227, 230, 236, 252, 261, 271, 281, 290, 305, 321, 325, 334, 344, 354, 366, 373, 378, 384, 390, 394, 408, 418, 428, 438, 449, 458, 467, 485, 496, 516, 528, 534, 542, 549, 558, 567, 584, 599, 608, 617, 629, 635, 657, 668, 679, 694, 706, 714, 724, 728, 738, 766, 795, 816, 841, 854, 878, 894, 916, 938, 957, 980, 1008, 1028, 1050, 1072, 1103, 1121, 1140, 1216, 1248, 1259, 1284, 1301, 1315, 1332, 1349, 1363, 1382, 1409, 1424, 1444, 1465, 1494, 1511, 1525, 1549, 1571, 1586, 1604, 1626, 1648, 1668, 1694, 1718, 1735, 1763, 1791, 1812, 1824, 1846, 1859, 1869, 1883, 1896, 1903, 1908, 1925, 1933, 1944, 1956, 1963, 1971, 1985, 2006, 2026, 2039, 2046, 2051, 2068, 2086, 2094, 2101, 2111, 2124, 2138, 2157, 2174, 2185, 2190, 2198, 2215, 2220, 2223, 2239, 2250, 2267, 2291, 2301, 2309, 2315}

func (i Directive) String() string {
	if i < 0 || i >= Directive(len(_Directive_index)-1) {
		return "Directive(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Directive_name[_Directive_index[i]:_Directive_index[i+1]]
}
