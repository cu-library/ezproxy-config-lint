// Code generated by "stringer -type Directive --linecomment"; DO NOT EDIT.

package linter

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Undefined-0]
	_ = x[AddUserHeader-1]
	_ = x[AllowIP-2]
	_ = x[AllowVars-3]
	_ = x[AnonymousURL-4]
	_ = x[Audit-5]
	_ = x[AuditPurge-6]
	_ = x[AutoLoginIP-7]
	_ = x[AutoLoginIPBanner-8]
	_ = x[BinaryTimeout-9]
	_ = x[Books24x7Site-10]
	_ = x[ByteServe-11]
	_ = x[CASServiceURL-12]
	_ = x[ChargeSetLatency-13]
	_ = x[Charset-14]
	_ = x[ClientTimeout-15]
	_ = x[ConnectWindow-16]
	_ = x[Cookie-17]
	_ = x[CookieFilter-18]
	_ = x[DbVar-19]
	_ = x[DbVar0-20]
	_ = x[DbVar1-21]
	_ = x[DbVar2-22]
	_ = x[DbVar3-23]
	_ = x[DbVar4-24]
	_ = x[DbVar5-25]
	_ = x[DbVar6-26]
	_ = x[DbVar7-27]
	_ = x[DbVar8-28]
	_ = x[DbVar9-29]
	_ = x[DenyIfRequestHeader-30]
	_ = x[Description-31]
	_ = x[DNS-32]
	_ = x[Domain-33]
	_ = x[DomainJavaScript-34]
	_ = x[EBLSecret-35]
	_ = x[EbrarySite-36]
	_ = x[EncryptVar-37]
	_ = x[ExcludeIP-38]
	_ = x[ExcludeIPBanner-39]
	_ = x[ExtraLoginCookie-40]
	_ = x[Find-41]
	_ = x[FirstPort-42]
	_ = x[FormSelect-43]
	_ = x[FormSubmit-44]
	_ = x[FormVariable-45]
	_ = x[Gartner-46]
	_ = x[Group-47]
	_ = x[HAName-48]
	_ = x[HAPeer-49]
	_ = x[Host-50]
	_ = x[HostJavaScript-51]
	_ = x[HTTPHeader-52]
	_ = x[HTTPMethod-53]
	_ = x[Identifier-54]
	_ = x[IncludeFile-55]
	_ = x[IncludeIP-56]
	_ = x[Interface-57]
	_ = x[IntruderIPAttempts-58]
	_ = x[IntruderLog-59]
	_ = x[IntruderUserAttempts-60]
	_ = x[IntrusionAPI-61]
	_ = x[LBPeer-62]
	_ = x[Location-63]
	_ = x[LogFile-64]
	_ = x[LogFilter-65]
	_ = x[LogFormat-66]
	_ = x[LoginCookieDomain-67]
	_ = x[LoginCookieName-68]
	_ = x[LoginMenu-69]
	_ = x[LoginPort-70]
	_ = x[LoginPortSSL-71]
	_ = x[LogSPU-72]
	_ = x[MaxConcurrentTransfers-73]
	_ = x[MaxLifetime-74]
	_ = x[MaxSessions-75]
	_ = x[MaxVirtualHosts-76]
	_ = x[MessagesFile-77]
	_ = x[MetaFind-78]
	_ = x[MimeFilter-79]
	_ = x[Name-80]
	_ = x[NeverProxy-81]
	_ = x[OptionAcceptXForwardedFor-82]
	_ = x[OptionAllowSendGZip-83]
	_ = x[OptionAllowWebSubdirectories-84]
	_ = x[OptionAnyDNSHostname-85]
	_ = x[OptionBlockCountryChange-86]
	_ = x[OptionCookie-87]
	_ = x[OptionCookiePassThrough-88]
	_ = x[OptionCSRFToken-89]
	_ = x[OptionDisableSSL40bit-90]
	_ = x[OptionDisableSSL56bit-91]
	_ = x[OptionDisableSSLv2-92]
	_ = x[OptionDomainCookieOnly-93]
	_ = x[OptionEbraryUnencodedTokens-94]
	_ = x[OptionExcludeIPMenu-95]
	_ = x[OptionForceHTTPSAdmin-96]
	_ = x[OptionForceHTTPSLogin-97]
	_ = x[OptionForceWildcardCertificate-98]
	_ = x[OptionHideEZproxy-99]
	_ = x[OptionHttpsHyphens-100]
	_ = x[OptionIChooseToUseDomainLinesThatThreatenTheSecurityOfMyNetwork-101]
	_ = x[OptionIgnoreWildcardCertificate-102]
	_ = x[OptionIPv6-103]
	_ = x[OptionLoginReplaceGroups-104]
	_ = x[OptionLogReferer-105]
	_ = x[OptionLogSAML-106]
	_ = x[OptionLogSession-107]
	_ = x[OptionLogSPUEdit-108]
	_ = x[OptionLogUser-109]
	_ = x[OptionMenuByGroups-110]
	_ = x[OptionMetaEZproxyRewriting-111]
	_ = x[OptionNoCookie-112]
	_ = x[OptionNoHideEZproxy-113]
	_ = x[OptionNoHttpsHyphens-114]
	_ = x[OptionNoMetaEZproxyRewriting-115]
	_ = x[OptionNoProxyFTP-116]
	_ = x[OptionNoUTF16-117]
	_ = x[OptionNoXForwardedFor-118]
	_ = x[OptionProxyByHostname-119]
	_ = x[OptionProxyFTP-120]
	_ = x[OptionRecordPeaks-121]
	_ = x[OptionRedirectUnknown-122]
	_ = x[OptionReferInHostname-123]
	_ = x[OptionRelaxedRADIUS-124]
	_ = x[OptionRequireAuthenticate-125]
	_ = x[OptionSafariCookiePatch-126]
	_ = x[OptionStatusUser-127]
	_ = x[OptionTicketIgnoreExcludeIP-128]
	_ = x[OptionUnsafeRedirectUnknown-129]
	_ = x[OptionUsernameCaretN-130]
	_ = x[OptionUTF16-131]
	_ = x[OptionXForwardedFor-132]
	_ = x[OverDriveSite-133]
	_ = x[PDFRefresh-134]
	_ = x[PDFRefreshPost-135]
	_ = x[PDFRefreshPre-136]
	_ = x[PidFile-137]
	_ = x[Proxy-138]
	_ = x[ProxyHostnameEdit-139]
	_ = x[ProxySSL-140]
	_ = x[RADIUSRetry-141]
	_ = x[RedirectSafe-142]
	_ = x[Referer-143]
	_ = x[RejectIP-144]
	_ = x[RemoteIPHeader-145]
	_ = x[RemoteIPInternalProxy-146]
	_ = x[RemoteIPTrustedProxy-147]
	_ = x[RemoteTimeout-148]
	_ = x[Replace-149]
	_ = x[RunAs-150]
	_ = x[ShibbolethDisable-151]
	_ = x[ShibbolethMetadata-152]
	_ = x[SkipPort-153]
	_ = x[SPUEdit-154]
	_ = x[SPUEditVar-155]
	_ = x[SQLiteTempDir-156]
	_ = x[SSLCipherSuite-157]
	_ = x[SSLHonorCipherOrder-158]
	_ = x[SSLOpenSSLConfCmd-159]
	_ = x[SSOUsername-160]
	_ = x[Title-161]
	_ = x[TokenKey-162]
	_ = x[TokenSignatureKey-163]
	_ = x[UMask-164]
	_ = x[URL-165]
	_ = x[URLAppendEncoded-166]
	_ = x[URLRedirect-167]
	_ = x[URLRedirectAppend-168]
	_ = x[URLRedirectAppendEncoded-169]
	_ = x[UsageLimit-170]
	_ = x[Validate-171]
	_ = x[XDebug-172]
}

const _Directive_name = "UndefinedAddUserHeaderAllowIPAllowVarsAnonymousURLAuditAuditPurgeAutoLoginIPAutoLoginIPBannerBinaryTimeoutBooks24x7SiteByteServeCASServiceURLChargeSetLatencyCharsetClientTimeoutConnectWindowCookieCookieFilterDbVarDbVar0DbVar1DbVar2DbVar3DbVar4DbVar5DbVar6DbVar7DbVar8DbVar9DenyIfRequestHeaderDescriptionDNSDomainDomainJavaScriptEBLSecretEbrarySiteEncryptVarExcludeIPExcludeIPBannerExtraLoginCookieFindFirstPortFormSelectFormSubmitFormVariableGartnerGroupHANameHAPeerHostHostJavaScriptHTTPHeaderHTTPMethodIdentifierIncludeFileIncludeIPInterfaceIntruderIPAttemptsIntruderLogIntruderUserAttemptsIntrusionAPILBPeerLocationLogFileLogFilterLogFormatLoginCookieDomainLoginCookieNameLoginMenuLoginPortLoginPortSSLLogSPUMaxConcurrentTransfersMaxLifetimeMaxSessionsMaxVirtualHostsMessagesFileMetaFindMimeFilterNameNeverProxyOption AcceptX-Forwarded-ForOption AllowSendGZipOption AllowWebSubdirectoriesOption AnyDNSHostnameOption BlockCountryChangeOption CookieOption CookiePassThroughOption CSRFTokenOption DisableSSL40bitOption DisableSSL56bitOption DisableSSLv2Option DomainCookieOnlyOption ebraryUnencodedTokensOption ExcludeIPMenuOption ForceHTTPSAdminOption ForceHTTPSLoginOption ForceWildcardCertificateOption HideEZproxyOption HttpsHyphensOption I choose to use Domain lines that threaten the security of my networkOption IgnoreWildcardCertificateOption IPv6Option LoginReplaceGroupsOption LogRefererOption LogSAMLOption LogSessionOption LogSPUEditOption LogUserOption MenuByGroupsOption MetaEZproxyRewritingOption NoCookieOption NoHideEZproxyOption NoHttpsHyphensOption NoMetaEZproxyRewritingOption NoProxyFTPOption NoUTF16Option NoX-Forwarded-ForOption ProxyByHostnameOption ProxyFTPOption RecordPeaksOption RedirectUnknownOption ReferInHostnameOption RelaxedRADIUSOption RequireAuthenticateOption SafariCookiePatchOption StatusUserOption TicketIgnoreExcludeIPOption UnsafeRedirectUnknownOption UsernameCaretNOption UTF16Option X-Forwarded-ForOverDriveSitePDFRefreshPDFRefreshPostPDFRefreshPrePidFileProxyProxyHostnameEditProxySSLRADIUSRetryRedirectSafeRefererRejectIPRemoteIPHeaderRemoteIPInternalProxyRemoteIPTrustedProxyRemoteTimeoutReplaceRunAsShibbolethDisableShibbolethMetadataSkipPortSPUEditSPUEditVarSQLiteTempDirSSLCipherSuiteSSLHonorCipherOrderSSLOpenSSLConfCmdSSOUsernameTitleTokenKeyTokenSignatureKeyUMaskURLURLAppendEncodedURLRedirectURLRedirectAppendURLRedirectAppendEncodedUsageLimitValidateXDebug"

var _Directive_index = [...]uint16{0, 9, 22, 29, 38, 50, 55, 65, 76, 93, 106, 119, 128, 141, 157, 164, 177, 190, 196, 208, 213, 219, 225, 231, 237, 243, 249, 255, 261, 267, 273, 292, 303, 306, 312, 328, 337, 347, 357, 366, 381, 397, 401, 410, 420, 430, 442, 449, 454, 460, 466, 470, 484, 494, 504, 514, 525, 534, 543, 561, 572, 592, 604, 610, 618, 625, 634, 643, 660, 675, 684, 693, 705, 711, 733, 744, 755, 770, 782, 790, 800, 804, 814, 842, 862, 891, 912, 937, 950, 974, 990, 1012, 1034, 1053, 1076, 1104, 1124, 1146, 1168, 1199, 1217, 1236, 1312, 1344, 1355, 1380, 1397, 1411, 1428, 1445, 1459, 1478, 1505, 1520, 1540, 1561, 1590, 1607, 1621, 1645, 1667, 1682, 1700, 1722, 1744, 1764, 1790, 1814, 1831, 1859, 1887, 1908, 1920, 1942, 1955, 1965, 1979, 1992, 1999, 2004, 2021, 2029, 2040, 2052, 2059, 2067, 2081, 2102, 2122, 2135, 2142, 2147, 2164, 2182, 2190, 2197, 2207, 2220, 2234, 2253, 2270, 2281, 2286, 2294, 2311, 2316, 2319, 2335, 2346, 2363, 2387, 2397, 2405, 2411}

func (i Directive) String() string {
	if i < 0 || i >= Directive(len(_Directive_index)-1) {
		return "Directive(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Directive_name[_Directive_index[i]:_Directive_index[i+1]]
}
