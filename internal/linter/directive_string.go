// Code generated by "stringer -type Directive --linecomment"; DO NOT EDIT.

package linter

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Undefined-0]
	_ = x[AddUserHeader-1]
	_ = x[AllowIP-2]
	_ = x[AllowVars-3]
	_ = x[AnonymousURL-4]
	_ = x[Audit-5]
	_ = x[AuditPurge-6]
	_ = x[AutoLoginIP-7]
	_ = x[AutoLoginIPBanner-8]
	_ = x[BinaryTimeout-9]
	_ = x[Books24x7Site-10]
	_ = x[ByteServe-11]
	_ = x[CASServiceURL-12]
	_ = x[ChargeSetLatency-13]
	_ = x[Charset-14]
	_ = x[ClientTimeout-15]
	_ = x[ConnectWindow-16]
	_ = x[Cookie-17]
	_ = x[CookieFilter-18]
	_ = x[DbVar-19]
	_ = x[DenyIfRequestHeader-20]
	_ = x[Description-21]
	_ = x[DNS-22]
	_ = x[Domain-23]
	_ = x[DomainJavaScript-24]
	_ = x[EBLSecret-25]
	_ = x[EbrarySite-26]
	_ = x[EncryptVar-27]
	_ = x[ExcludeIP-28]
	_ = x[ExcludeIPBanner-29]
	_ = x[ExtraLoginCookie-30]
	_ = x[Find-31]
	_ = x[FirstPort-32]
	_ = x[FormSelect-33]
	_ = x[FormSubmit-34]
	_ = x[FormVariable-35]
	_ = x[Gartner-36]
	_ = x[Group-37]
	_ = x[HAName-38]
	_ = x[HAPeer-39]
	_ = x[Host-40]
	_ = x[HostJavaScript-41]
	_ = x[HTTPHeader-42]
	_ = x[HTTPMethod-43]
	_ = x[Identifier-44]
	_ = x[IncludeFile-45]
	_ = x[IncludeIP-46]
	_ = x[Interface-47]
	_ = x[IntruderIPAttempts-48]
	_ = x[IntruderLog-49]
	_ = x[IntruderUserAttempts-50]
	_ = x[IntrusionAPI-51]
	_ = x[LBPeer-52]
	_ = x[Location-53]
	_ = x[LogFile-54]
	_ = x[LogFilter-55]
	_ = x[LogFormat-56]
	_ = x[LoginCookieDomain-57]
	_ = x[LoginCookieName-58]
	_ = x[LoginMenu-59]
	_ = x[LoginPort-60]
	_ = x[LoginPortSSL-61]
	_ = x[LogSPU-62]
	_ = x[MaxConcurrentTransfers-63]
	_ = x[MaxLifetime-64]
	_ = x[MaxSessions-65]
	_ = x[MaxVirtualHosts-66]
	_ = x[MessagesFile-67]
	_ = x[MetaFind-68]
	_ = x[MimeFilter-69]
	_ = x[Name-70]
	_ = x[NeverProxy-71]
	_ = x[OptionAcceptXForwardedFor-72]
	_ = x[OptionAllowSendGZip-73]
	_ = x[OptionAllowWebSubdirectories-74]
	_ = x[OptionAnyDNSHostname-75]
	_ = x[OptionBlockCountryChange-76]
	_ = x[OptionCookie-77]
	_ = x[OptionCookiePassThrough-78]
	_ = x[OptionCSRFToken-79]
	_ = x[OptionDisableSSL40bit-80]
	_ = x[OptionDisableSSL56bit-81]
	_ = x[OptionDisableSSLv2-82]
	_ = x[OptionDomainCookieOnly-83]
	_ = x[OptionEbraryUnencodedTokens-84]
	_ = x[OptionExcludeIPMenu-85]
	_ = x[OptionForceHTTPSAdmin-86]
	_ = x[OptionForceHTTPSLogin-87]
	_ = x[OptionForceWildcardCertificate-88]
	_ = x[OptionHideEZproxy-89]
	_ = x[OptionHttpsHyphens-90]
	_ = x[OptionIChooseToUseDomainLinesThatThreatenTheSecurityOfMyNetwork-91]
	_ = x[OptionIgnoreWildcardCertificate-92]
	_ = x[OptionIPv6-93]
	_ = x[OptionLoginReplaceGroups-94]
	_ = x[OptionLogReferer-95]
	_ = x[OptionLogSAML-96]
	_ = x[OptionLogSession-97]
	_ = x[OptionLogSPUEdit-98]
	_ = x[OptionLogUser-99]
	_ = x[OptionMenuByGroups-100]
	_ = x[OptionMetaEZproxyRewriting-101]
	_ = x[OptionNoCookie-102]
	_ = x[OptionNoHideEZproxy-103]
	_ = x[OptionNoHttpsHyphens-104]
	_ = x[OptionNoMetaEZproxyRewriting-105]
	_ = x[OptionNoProxyFTP-106]
	_ = x[OptionNoUTF16-107]
	_ = x[OptionNoXForwardedFor-108]
	_ = x[OptionProxyByHostname-109]
	_ = x[OptionProxyFTP-110]
	_ = x[OptionRecordPeaks-111]
	_ = x[OptionRedirectUnknown-112]
	_ = x[OptionReferInHostname-113]
	_ = x[OptionRelaxedRADIUS-114]
	_ = x[OptionRequireAuthenticate-115]
	_ = x[OptionSafariCookiePatch-116]
	_ = x[OptionStatusUser-117]
	_ = x[OptionTicketIgnoreExcludeIP-118]
	_ = x[OptionUnsafeRedirectUnknown-119]
	_ = x[OptionUsernameCaretN-120]
	_ = x[OptionUTF16-121]
	_ = x[OptionXForwardedFor-122]
	_ = x[OverDriveSite-123]
	_ = x[PDFRefresh-124]
	_ = x[PDFRefreshPost-125]
	_ = x[PDFRefreshPre-126]
	_ = x[PidFile-127]
	_ = x[Proxy-128]
	_ = x[ProxyHostnameEdit-129]
	_ = x[ProxySSL-130]
	_ = x[RADIUSRetry-131]
	_ = x[RedirectSafe-132]
	_ = x[Referer-133]
	_ = x[RejectIP-134]
	_ = x[RemoteIPHeader-135]
	_ = x[RemoteIPInternalProxy-136]
	_ = x[RemoteIPTrustedProxy-137]
	_ = x[RemoteTimeout-138]
	_ = x[Replace-139]
	_ = x[RunAs-140]
	_ = x[ShibbolethDisable-141]
	_ = x[ShibbolethMetadata-142]
	_ = x[SkipPort-143]
	_ = x[SPUEdit-144]
	_ = x[SPUEditVar-145]
	_ = x[SQLiteTempDir-146]
	_ = x[SSLCipherSuite-147]
	_ = x[SSLHonorCipherOrder-148]
	_ = x[SSLOpenSSLConfCmd-149]
	_ = x[SSOUsername-150]
	_ = x[Title-151]
	_ = x[TokenKey-152]
	_ = x[TokenSignatureKey-153]
	_ = x[UMask-154]
	_ = x[URL-155]
	_ = x[URLAppendEncoded-156]
	_ = x[URLRedirect-157]
	_ = x[URLRedirectAppend-158]
	_ = x[URLRedirectAppendEncoded-159]
	_ = x[UsageLimit-160]
	_ = x[Validate-161]
	_ = x[XDebug-162]
}

const _Directive_name = "UndefinedAddUserHeaderAllowIPAllowVarsAnonymousURLAuditAuditPurgeAutoLoginIPAutoLoginIPBannerBinaryTimeoutBooks24x7SiteByteServeCASServiceURLChargeSetLatencyCharsetClientTimeoutConnectWindowCookieCookieFilterDbVarDenyIfRequestHeaderDescriptionDNSDomainDomainJavaScriptEBLSecretEbrarySiteEncryptVarExcludeIPExcludeIPBannerExtraLoginCookieFindFirstPortFormSelectFormSubmitFormVariableGartnerGroupHANameHAPeerHostHostJavaScriptHTTPHeaderHTTPMethodIdentifierIncludeFileIncludeIPInterfaceIntruderIPAttemptsIntruderLogIntruderUserAttemptsIntrusionAPILBPeerLocationLogFileLogFilterLogFormatLoginCookieDomainLoginCookieNameLoginMenuLoginPortLoginPortSSLLogSPUMaxConcurrentTransfersMaxLifetimeMaxSessionsMaxVirtualHostsMessagesFileMetaFindMimeFilterNameNeverProxyOption AcceptX-Forwarded-ForOption AllowSendGZipOption AllowWebSubdirectoriesOption AnyDNSHostnameOption BlockCountryChangeOption CookieOption CookiePassThroughOption CSRFTokenOption DisableSSL40bitOption DisableSSL56bitOption DisableSSLv2Option DomainCookieOnlyOption ebraryUnencodedTokensOption ExcludeIPMenuOption ForceHTTPSAdminOption ForceHTTPSLoginOption ForceWildcardCertificateOption HideEZproxyOption HttpsHyphensOption I choose to use Domain lines that threaten the security of my networkOption IgnoreWildcardCertificateOption IPv6Option LoginReplaceGroupsOption LogRefererOption LogSAMLOption LogSessionOption LogSPUEditOption LogUserOption MenuByGroupsOption MetaEZproxyRewritingOption NoCookieOption NoHideEZproxyOption NoHttpsHyphensOption NoMetaEZproxyRewritingOption NoProxyFTPOption NoUTF16Option NoX-Forwarded-ForOption ProxyByHostnameOption ProxyFTPOption RecordPeaksOption RedirectUnknownOption ReferInHostnameOption RelaxedRADIUSOption RequireAuthenticateOption SafariCookiePatchOption StatusUserOption TicketIgnoreExcludeIPOption UnsafeRedirectUnknownOption UsernameCaretNOption UTF16Option X-Forwarded-ForOverDriveSitePDFRefreshPDFRefreshPostPDFRefreshPrePidFileProxyProxyHostnameEditProxySSLRADIUSRetryRedirectSafeRefererRejectIPRemoteIPHeaderRemoteIPInternalProxyRemoteIPTrustedProxyRemoteTimeoutReplaceRunAsShibbolethDisableShibbolethMetadataSkipPortSPUEditSPUEditVarSQLiteTempDirSSLCipherSuiteSSLHonorCipherOrderSSLOpenSSLConfCmdSSOUsernameTitleTokenKeyTokenSignatureKeyUMaskURLURLAppendEncodedURLRedirectURLRedirectAppendURLRedirectAppendEncodedUsageLimitValidateXDebug"

var _Directive_index = [...]uint16{0, 9, 22, 29, 38, 50, 55, 65, 76, 93, 106, 119, 128, 141, 157, 164, 177, 190, 196, 208, 213, 232, 243, 246, 252, 268, 277, 287, 297, 306, 321, 337, 341, 350, 360, 370, 382, 389, 394, 400, 406, 410, 424, 434, 444, 454, 465, 474, 483, 501, 512, 532, 544, 550, 558, 565, 574, 583, 600, 615, 624, 633, 645, 651, 673, 684, 695, 710, 722, 730, 740, 744, 754, 782, 802, 831, 852, 877, 890, 914, 930, 952, 974, 993, 1016, 1044, 1064, 1086, 1108, 1139, 1157, 1176, 1252, 1284, 1295, 1320, 1337, 1351, 1368, 1385, 1399, 1418, 1445, 1460, 1480, 1501, 1530, 1547, 1561, 1585, 1607, 1622, 1640, 1662, 1684, 1704, 1730, 1754, 1771, 1799, 1827, 1848, 1860, 1882, 1895, 1905, 1919, 1932, 1939, 1944, 1961, 1969, 1980, 1992, 1999, 2007, 2021, 2042, 2062, 2075, 2082, 2087, 2104, 2122, 2130, 2137, 2147, 2160, 2174, 2193, 2210, 2221, 2226, 2234, 2251, 2256, 2259, 2275, 2286, 2303, 2327, 2337, 2345, 2351}

func (i Directive) String() string {
	if i < 0 || i >= Directive(len(_Directive_index)-1) {
		return "Directive(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Directive_name[_Directive_index[i]:_Directive_index[i+1]]
}
